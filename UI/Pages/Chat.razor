@page "/Chat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Models
@using UI.Extensions
@using BlazorDownloadFile
@inject SignalRClientState SignalRClientState
@inject NavigationManager Navigation
@inject ILogger<Chat> Logger
@inject IBlazorDownloadFileService BlazorDownloadFileService
@attribute [Authorize]
@implements IDisposable

<PageTitle>Chatroom </PageTitle>

<div class="mt-3">
    <h3>Welcome (<code>@(SignalRClientState.UserInfo?.Name)</code>) to chatroom:</h3>
    <p>
        Note that <code>password</code> is never sent via a socket, You are responsible to exchange the symmetric key
        <br/>
        Active users (@(SignalRClientState.Count)): @(string.Join(", ", SignalRClientState.Names))
    </p>

    <div class="row">
        <div class="col-sm-5 offset-sm-7">
            <div class="float-end">
                <HxButton Color="ThemeColor.Danger" OnClick="@(LogoutHandler)"> Logout </HxButton>
            </div>
        </div>
    </div>

    <hr/>

    <EditForm Model="@_messagePayload" OnValidSubmit="@(ValidFormSubmitted)" OnInvalidSubmit="@(InvalidFormSubmitted)">
        <DataAnnotationsValidator/>

        <HxFormState>
            <HxInputTextArea Label="Message" @bind-Value="@_messagePayload.Message" Placeholder="Enter message here" Type="InputType.Text"/>

            <HxInputFile @ref="_component" Label="File" OnChange="@(OnFileChange)"/>

            @if (_component != null && _messagePayload.File != null)
            {
                <HxButton Text="Clear" CssClass="mt-3" OnClick="@(async () => await ClearFileInput())" Color="ThemeColor.Secondary"/>
            }

            <HxSubmit Color="ThemeColor.Success" Enabled="true">Send Message</HxSubmit>
        </HxFormState>

    </EditForm>

    <hr/>

    <h4>Messages:</h4>

    <br/>

    @if (SignalRClientState.Messages.Count == 0)
    {
        <HxAlert Color="ThemeColor.Warning">
            <strong>Info!</strong> No message yet.
        </HxAlert>
    }

    @foreach (var (message, valid) in SignalRClientState.Messages)
    {
        <HxCard CssClass="mt-3">
            <HeaderTemplate>
                <div class="float-start">
                    <label class="me-2">
                        From: @(message.Name)
                    </label>
                    @if (valid)
                    {
                        <label claass="mx-2">
                            <HxBadge Color="ThemeColor.Success">Valid</HxBadge>
                        </label>
                    }
                    else
                    {
                        <label claass="mx-2">
                            <HxBadge Color="ThemeColor.Danger">Invalid</HxBadge>
                        </label>
                    }
                </div>
                <div class="float-end">
                    <label class="ms-2">
                        Sent on: @(message.Date.ToLongTimeString()) 
                    </label>
                </div>
            </HeaderTemplate>
            <BodyTemplate>
                @if (message.File != null)
                {
                    <HxCardTitle>
                        @if (valid)
                        {
                            <HxButton Color="ThemeColor.Secondary" OnClick="@(() => Download(message.File))" Enabled="true"> Download </HxButton>
                        }
                        else
                        {
                            <HxButton Color="ThemeColor.Secondary" Enabled="false"> Download </HxButton>
                        }
                    </HxCardTitle>
                }

                @if (valid)
                {
                    <HxCardText>
                        @(message.Message)
                    </HxCardText>
                }
                else
                {
                    <HxCardText>
                        <pre>@(message.Message)</pre>
                    </HxCardText>
                }
            </BodyTemplate>
        </HxCard>
    }
</div>

@code {
    private HxInputFile? _component;

    private MessagePayload _messagePayload = new();

    protected override async Task OnInitializedAsync()
    {
        await SignalRClientState.Initialize();

        if (!SignalRClientState.IsLoggedIn())
        {
            Navigation.NavigateTo("/");
        }
        
        SignalRClientState.OnChange += OnChangeHandler;
    }

    private void LogoutHandler()
    {
        SignalRClientState.Logout();

        Navigation.NavigateTo("/");
    }

    private async Task Download(FilePayload filePayload)
    {
        await BlazorDownloadFileService.DownloadFile(filePayload.Name, filePayload.Data, filePayload.ContentType);
    }

    private async Task OnFileChange(InputFileChangeEventArgs file)
    {
        _messagePayload.File = new FilePayload
        {
            Name = file.File.Name,
            ContentType = file.File.ContentType,
            Data = await file.File.OpenReadStream(int.MaxValue).ConvertToBase64(),
        };
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        // Just making sure.
        if (SignalRClientState.UserInfo == null) return;
        
        try
        {
            _messagePayload.Date = DateTime.Now;
            _messagePayload.Name = SignalRClientState.UserInfo!.Name;

            if (_component != null)
            {
                var files = await _component.GetFilesAsync();
                if (!files.Any())
                {
                    _messagePayload.File = null;
                }
            }

            await SignalRClientState.Send(_messagePayload);

            // Reset the payload
            _messagePayload = new MessagePayload();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to send");
        }
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        Logger.LogError("Form validation failed because of {}", editContext.GetValidationMessages());
    }

    private void OnChangeHandler(object? _, EventArgs args)
    {
        StateHasChanged();
    }

    private async Task ClearFileInput()
    {
        await _component?.ResetAsync()!;

        _messagePayload.File = null;
    }

    void IDisposable.Dispose()
    {
        if (SignalRClientState?.OnChange != null)
        {
#pragma warning disable CS8601
            SignalRClientState.OnChange -= OnChangeHandler;
#pragma warning restore CS8601
        }
    }

}