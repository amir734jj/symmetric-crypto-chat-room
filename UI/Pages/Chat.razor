@page "/Chat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Models
@using UI.Extensions
@using BlazorDownloadFile
@using ByteSizeLib
@using System.Text.Json
@using CurrieTechnologies.Razor.PageVisibility
@using Models.Interfaces
@inject SignalRStateManager SignalRStateManager
@inject NavigationManager Navigation
@inject ILogger<Chat> Logger
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject State State
@inject PageVisibilityService Visibility
@inject IJSRuntime Js
@attribute [Authorize]
@implements IDisposable

<PageTitle>Chatroom </PageTitle>

<div class="mt-3">
    <h3>Welcome (<code>@(State.UserInfo?.Name)</code>) to chatroom:</h3>
    <p>
        Note that <code>password</code> is never sent via a socket, You are responsible to exchange the symmetric key
        <br/>
        Active users (@(State.Count)): @(string.Join(", ", State.Names))
    </p>

    <div class="row">
        <div class="col-sm-5 offset-sm-7">
            <div class="float-end">
                <HxButton Color="ThemeColor.Danger" Size="ButtonSize.Small" OnClick="@(LogoutHandler)"> Logout </HxButton>
            </div>
        </div>
    </div>

    <hr/>

    <EditForm Model="@_messagePayload" OnValidSubmit="@(ValidFormSubmitted)" OnInvalidSubmit="@(InvalidFormSubmitted)">
        <DataAnnotationsValidator/>

        <HxFormState>
            <HxInputTextArea Label="Message" @bind-Value="@_messagePayload.Message" Placeholder="Enter message here" Type="InputType.Text"/>

            <HxInputFile @ref="_component" Label="File" OnChange="@(OnFileChange)" Multiple="@(true)" MaxFileSize="@((long)ByteSize.FromMegaBytes(25).Bytes)"/>

            @if (_component != null && _messagePayload.Files != null && _messagePayload.Files.Any())
            {
                <HxButton Text="Clear" CssClass="mt-3" OnClick="@(async () => await ClearFileInput())" Color="ThemeColor.Secondary"/>
            }

            <HxSubmit Color="ThemeColor.Success" Enabled="true">Send Message</HxSubmit>
        </HxFormState>

    </EditForm>

    <hr/>

    <div class="row">
        <div class="col-sm-7">
            <div class="float-start">
                <h4>Messages:</h4>
            </div>
        </div>
        <div class="col-sm-5">
            <div class="float-end ms-2">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" OnClick="@(() => _showState = !_showState)">
                    @(_showState ? "Hide State" : "Show State")
                </HxButton>
            </div>
        </div>
    </div>


    @if (_showState)
    {
        <pre class="my-2">
@(JsonSerializer.Serialize(State, typeof(IReadonlyState), new JsonSerializerOptions { WriteIndented = true }))
        </pre>
    }

    <br/>

    @if (State.Messages.Count == 0)
    {
        <HxAlert Color="ThemeColor.Warning">
            <strong>Info!</strong> No message yet.
        </HxAlert>
    }

    @foreach (var (message, valid) in State.Messages)
    {
        <HxCard CssClass="mt-3">
            <HeaderTemplate>
                <div class="float-start">
                    <label class="me-2">
                        From: @(message.Name)
                    </label>
                    @if (valid)
                    {
                        <label claass="mx-2">
                            <HxBadge Color="ThemeColor.Success">Valid</HxBadge>
                        </label>
                    }
                    else
                    {
                        <label claass="mx-2">
                            <HxBadge Color="ThemeColor.Danger">Invalid</HxBadge>
                        </label>
                    }
                </div>
                <div class="float-end">
                    <label class="ms-2">
                        Sent on: @(message.Date.ToLongTimeString())
                    </label>
                </div>
            </HeaderTemplate>
            <BodyTemplate>
                @foreach (var file in message.Files)
                {
                    <p>
                        @if (valid)
                        {
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" OnClick="@(() => Download(file))" Enabled="true"> Download </HxButton>
                        }
                        else
                        {
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="false"> Download </HxButton>
                        }

                        <label class="ms-2">


                            @file.Name
                        </label>
                    </p>
                }

                @if (valid)
                {
                    <HxCardText>
                        @(message.Message)
                    </HxCardText>
                }
                else
                {
                    <HxCardText>
                        <pre>@(message.Message)</pre>
                    </HxCardText>
                }
            </BodyTemplate>
        </HxCard>
    }
</div>

<audio @ref="_elementReference" style="display: none">
    <source src="message.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>

@code {
    private HxInputFile? _component;

    private MessagePayload _messagePayload = new();

    private ElementReference _elementReference;

    private bool _showState;

    protected override void OnInitialized()
    {
        if (!SignalRStateManager.IsLoggedIn())
        {
            Navigation.NavigateTo("/");
        }

        State.PropertyChanged += OnChangeHandler;
    }

    private void LogoutHandler()
    {
        SignalRStateManager.Logout();

        Navigation.NavigateTo("/");
    }

    private async Task Download(FilePayload filePayload)
    {
        await BlazorDownloadFileService.DownloadFile(filePayload.Name, filePayload.Data, filePayload.ContentType);
    }

    private async Task OnFileChange(InputFileChangeEventArgs eventArgs)
    {
        foreach (var file in eventArgs.GetMultipleFiles())
        {
            _messagePayload.Files.Add(new FilePayload
            {
                Name = file.Name,
                ContentType = file.ContentType,
                Data = await file.OpenReadStream(int.MaxValue).ConvertToBase64(),
            });
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        // Just making sure.
        if (State.UserInfo == null) return;

        try
        {
            _messagePayload.Date = DateTime.Now;
            _messagePayload.Name = State.UserInfo!.Name;

            await SignalRStateManager.Send(_messagePayload);

            // Reset the payload
            _messagePayload = new MessagePayload();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to send");
        }
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        Logger.LogError("Form validation failed because of {}", editContext.GetValidationMessages());
    }

    private void OnChangeHandler(object? source, EventArgs args)
    {
#pragma warning disable CS4014
        OnChangeHandlerAsync(source, args);
#pragma warning restore CS4014
    }

    private async Task OnChangeHandlerAsync(object? _, EventArgs args)
    {
        if (State.StateEnum.HasFlag(SignalRStateEnum.Receiving) && await Visibility.IsHiddenAsync())
        {
            await Js.InvokeVoidAsync("playAudio", _elementReference);
        }
        
        StateHasChanged();
    }

    private async Task ClearFileInput()
    {
        await _component?.ResetAsync()!;

        _messagePayload.Files = new List<FilePayload>();
    }

    void IDisposable.Dispose()
    {
        State.PropertyChanged -= OnChangeHandler;
    }

}